{"version":3,"sources":["covervid.js"],"names":["module","exports","coverVid","elem","width","height","onElementResize","undefined","document","addEventListener","sizeVideo","addRatioWatcher","window","onresize","throttle","style","position","top","left","transform","parentNode","overflow","fn","threshhold","scope","last","deferTimer","context","now","Date","args","arguments","clearTimeout","setTimeout","apply","parentHeight","offsetHeight","parentWidth","offsetWidth","nativeWidth","nativeHeight","heightScaleFactor","widthScaleFactor","frequency","lastHeight","lastWidth","newWidth","newHeight","id","setInterval"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,eAAvC,EAAwD;AACvE;AACA,MAAI,QAAOA,eAAP,yCAAOA,eAAP,OAA4BC,SAAhC,EAA2C;AACzCD,sBAAkB,KAAlB;AACD;;AAED;AACAE,WAASC,gBAAT,CAA0B,kBAA1B,EAA8CC;;AAE9C;AAFA,IAGA,IAAIJ,eAAJ,EAAqB;AACnBK,oBAAgBR,IAAhB,EAAsB,GAAtB;AACD,GAFD,MAEO;AACL;AACAS,WAAOC,QAAP,GAAkB,YAAY;AAC5BC,eAASJ,WAAT,EAAsB,EAAtB;AACD,KAFD;AAGD;;AAED;AACAP,OAAKY,KAAL,CAAWC,QAAX,GAAsB,UAAtB;AACAb,OAAKY,KAAL,CAAWE,GAAX,GAAiB,KAAjB;AACAd,OAAKY,KAAL,CAAWG,IAAX,GAAkB,KAAlB;AACAf,OAAKY,KAAL,CAAW,mBAAX,IAAkC,uBAAlC;AACAZ,OAAKY,KAAL,CAAW,eAAX,IAA8B,uBAA9B;AACAZ,OAAKY,KAAL,CAAWI,SAAX,GAAuB,uBAAvB;;AAEA;AACAhB,OAAKiB,UAAL,CAAgBL,KAAhB,CAAsBM,QAAtB,GAAiC,QAAjC;;AAEA;AACA,WAASP,QAAT,CAAmBQ,EAAnB,EAAuBC,UAAvB,EAAmCC,KAAnC,EAA0C;AACxC,QAAID,eAAehB,SAAnB,EAA8B;AAC5BgB,mBAAa,GAAb;AACD;AACD,QAAIE,IAAJ;AACA,QAAIC,UAAJ;AACA,WAAO,YAAY;AACjB,UAAIC,UAAUH,SAAS,IAAvB;AACA,UAAII,MAAM,CAAC,IAAIC,IAAJ,EAAX;AACA,UAAIC,OAAOC,SAAX;AACA,UAAIN,QAAQG,MAAMH,OAAOF,UAAzB,EAAqC;AACnC;AACAS,qBAAaN,UAAb;AACAA,qBAAaO,WAAW,YAAY;AAClCR,iBAAOG,GAAP;AACAN,aAAGY,KAAH,CAASP,OAAT,EAAkBG,IAAlB;AACD,SAHY,EAGVP,UAHU,CAAb;AAID,OAPD,MAOO;AACLE,eAAOG,GAAP;AACAN,WAAGY,KAAH,CAASP,OAAT,EAAkBG,IAAlB;AACD;AACF,KAfD;AAgBD;;AAED;AACA,WAASpB,SAAT,GAAsB;AACpB;AACA,QAAIyB,eAAehC,KAAKiB,UAAL,CAAgBgB,YAAnC;AACA,QAAIC,cAAclC,KAAKiB,UAAL,CAAgBkB,WAAlC;;AAEA;AACA,QAAIC,cAAcnC,KAAlB;AACA,QAAIoC,eAAenC,MAAnB;;AAEA;AACA,QAAIoC,oBAAoBN,eAAeK,YAAvC;AACA,QAAIE,mBAAmBL,cAAcE,WAArC;;AAEA;AACA,QAAIG,mBAAmBD,iBAAvB,EAA0C;AACxCtC,WAAKY,KAAL,CAAWV,MAAX,GAAoB,MAApB;AACAF,WAAKY,KAAL,CAAWX,KAAX,GAAmBiC,cAAc,IAAjC;AACD,KAHD,MAGO;AACLlC,WAAKY,KAAL,CAAWV,MAAX,GAAoB8B,eAAe,IAAnC;AACAhC,WAAKY,KAAL,CAAWX,KAAX,GAAmB,MAAnB;AACD;AACF;;AAED;;;;;;AAMA,WAASO,eAAT,CAA0BR,IAA1B,EAAgCwC,SAAhC,EAA2C;AACzC;AACA,QACEC,aAAa,CADf;AAAA,QAEEC,YAAY,CAFd;AAAA,QAGEC,WAAW3C,KAAKiB,UAAL,CAAgBkB,WAH7B;AAAA,QAIES,YAAY5C,KAAKiB,UAAL,CAAgBgB,YAJ9B;AAKA,QAAIY,KAAKpC,OAAOqC,WAAP,CAAmB,YAAY;AACtC;AACAH,iBAAW3C,KAAKiB,UAAL,CAAgBkB,WAA3B;AACAS,kBAAY5C,KAAKiB,UAAL,CAAgBgB,YAA5B;AACA;AACA,UAAIU,aAAaD,SAAb,IAA0BE,cAAcH,UAA5C,EAAwD;AACtDlC;AACAkC,qBAAaG,SAAb;AACAF,oBAAYC,QAAZ;AACD;AACF,KAVQ,EAUNH,SAVM,CAAT;AAWD;AACF,CAxGD","file":"covervid.min.js","sourcesContent":["module.exports = function coverVid(elem, width, height, onElementResize) {\n  // Set default arguments if not passed.\n  if (typeof(onElementResize) === undefined) {\n    onElementResize = false\n  }\n\n  // Call sizeVideo on load.\n  document.addEventListener('DOMContentLoaded', sizeVideo)\n\n  // Call sizeVideo on \"element resize\" if turned on.\n  if (onElementResize) {\n    addRatioWatcher(elem, 350)\n  } else {\n    // Default to calling sizeVideo on resize.\n    window.onresize = function () {\n      throttle(sizeVideo(), 50)\n    }\n  }\n\n  // Set necessary styles to position video \"like cover\".\n  elem.style.position = 'absolute'\n  elem.style.top = '50%'\n  elem.style.left = '50%'\n  elem.style['-webkit-transform'] = 'translate(-50%, -50%)'\n  elem.style['-ms-transform'] = 'translate(-50%, -50%)'\n  elem.style.transform = 'translate(-50%, -50%)'\n\n  // Set overflow hidden on parent element.\n  elem.parentNode.style.overflow = 'hidden'\n\n  // Throttle for resize function.\n  function throttle (fn, threshhold, scope) {\n    if (threshhold === undefined) {\n      threshhold = 250\n    }\n    var last\n    var deferTimer\n    return function () {\n      var context = scope || this\n      var now = +new Date()\n      var args = arguments\n      if (last && now < last + threshhold) {\n        // hold on to it\n        clearTimeout(deferTimer)\n        deferTimer = setTimeout(function () {\n          last = now\n          fn.apply(context, args)\n        }, threshhold)\n      } else {\n        last = now\n        fn.apply(context, args)\n      }\n    }\n  }\n\n  // Define the attached selector.\n  function sizeVideo () {\n    // Get parent element height and width.\n    var parentHeight = elem.parentNode.offsetHeight\n    var parentWidth = elem.parentNode.offsetWidth\n\n    // Get native video width and height.\n    var nativeWidth = width\n    var nativeHeight = height\n\n    // Get the scale factors.\n    var heightScaleFactor = parentHeight / nativeHeight\n    var widthScaleFactor = parentWidth / nativeWidth\n\n    // Based on highest scale factor set width and height.\n    if (widthScaleFactor > heightScaleFactor) {\n      elem.style.height = 'auto'\n      elem.style.width = parentWidth + 'px'\n    } else {\n      elem.style.height = parentHeight + 'px'\n      elem.style.width = 'auto'\n    }\n  }\n\n  /**\n   * Attaches a seasonally triggered watcher\n   * to the element that wraps the video. If\n   * the outer width / height changes it\n   * triggers the video resizing.\n   */\n  function addRatioWatcher (elem, frequency) {\n    // Initial measurements.\n    var \n      lastHeight = 0,\n      lastWidth = 0,\n      newWidth = elem.parentNode.offsetWidth,\n      newHeight = elem.parentNode.offsetHeight\n    var id = window.setInterval(function () {\n      // Update widths & heights.\n      newWidth = elem.parentNode.offsetWidth\n      newHeight = elem.parentNode.offsetHeight\n      // Check if we need to resize video.\n      if (newWidth !== lastWidth || newHeight !== lastHeight) {\n        sizeVideo()\n        lastHeight = newHeight\n        lastWidth = newWidth\n      }\n    }, frequency)\n  }\n}\n"]}